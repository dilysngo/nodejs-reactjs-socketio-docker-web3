"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_exception_1 = require("./http.exception");
const http_status_enum_1 = require("../enums/http-status.enum");
/**
 * Defines an HTTP exception for *Payload Too Large* type errors.
 *
 * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)
 *
 * @publicApi
 */
class PayloadTooLargeException extends http_exception_1.HttpException {
    /**
     * Instantiate a `PayloadTooLargeException` Exception.
     *
     * @example
     * `throw new PayloadTooLargeException()`
     *
     * @usageNotes
     * The HTTP response status code will be 413.
     * - The `objectOrError` argument defines the JSON response body or the error string.
     * - The `message` argument contains a short description of the HTTP error.
     *
     * By default, the JSON response body contains two properties:
     * - `statusCode`: this will be the value 413.
     * - `message`: the string `'Payload Too Large'` by default; override this by supplying
     * a string in the `message` parameter.
     *
     * If the parameter `objectOrError` is a string, the response body will contain an
     * additional property, `error`, containing the given string. To override the
     * entire JSON response body, pass an object instead. Nest will serialize the object
     * and return it as the JSON response body.
     *
     * @param objectOrError string or object describing the error condition.
     * @param message a short description of the HTTP error.
     */
    constructor(objectOrError, message = 'Payload Too Large') {
        super(http_exception_1.HttpException.createBody(objectOrError, message, http_status_enum_1.HttpStatus.PAYLOAD_TOO_LARGE), http_status_enum_1.HttpStatus.PAYLOAD_TOO_LARGE);
    }
}
exports.PayloadTooLargeException = PayloadTooLargeException;
